{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["Table","this","props","characterData","removeCharacter","Component","TableHeader","TableBody","rows","map","row","index","key","name","job","onClick","Form","handleChange","event","target","value","setState","submitForm","handleSubmit","state","initialState","type","onChange","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById"],"mappings":"iPAEMA,E,iLACM,IAAD,EACoCC,KAAKC,MAAxCC,EADD,EACCA,cAAeC,EADhB,EACgBA,gBACvB,OACE,+BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWD,cAAeA,EAAeC,gBAAiBA,S,GAN5CC,aAYdC,EAAc,WAClB,OACE,+BACE,4BACE,oCACA,mCACA,yCAMFC,EAAY,SAAAL,GAChB,IAAMM,EAAON,EAAMC,cAAcM,KAAI,SAACC,EAAKC,GACzC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACJ,4BAAQC,QAAS,kBAAMb,EAAME,gBAAgBO,KAA7C,eAMF,OAAO,+BAAQH,IAGFR,I,OCWAgB,E,YAlDb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAYRe,aAAe,SAAAC,GAAU,IAAD,EACAA,EAAMC,OAAtBN,EADgB,EAChBA,KAAMO,EADU,EACVA,MAEd,EAAKC,SAAL,eACGR,EAAOO,KAjBS,EAqBrBE,WAAa,WACX,EAAKpB,MAAMqB,aAAa,EAAKC,OAC7B,EAAKH,SAAS,EAAKI,eAnBjB,EAAKA,aAAe,CAClBZ,KAAM,GACNC,IAAK,IAGP,EAAKU,MAAQ,EAAKC,aATD,E,sEA0BX,IAAD,EACexB,KAAKuB,MAAnBX,EADD,EACCA,KAAMC,EADP,EACOA,IAEd,OACE,8BACE,uCACA,2BACEY,KAAK,OACLb,KAAK,OACLO,MAAOP,EACPc,SAAU1B,KAAKgB,eACjB,sCACA,2BACES,KAAK,OACLb,KAAK,MACLO,MAAON,EACPa,SAAU1B,KAAKgB,eACf,2BAAOS,KAAK,SAASN,MAAM,SAASL,QAASd,KAAKqB,kB,GA5CvCjB,aCgCJuB,E,2MA7BXJ,MAAQ,CACJK,WAAa,I,EAKjBzB,gBAAkB,SAAAO,GAAU,IACtBkB,EAAe,EAAKL,MAApBK,WACR,EAAKR,SAAS,CACZQ,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAMrB,Q,EAKnBY,aAAe,SAAAQ,GACb,EAAKV,SAAS,CAAEQ,WAAW,GAAD,mBAAM,EAAKL,MAAMK,YAAjB,CAA6BE,O,wEAIrD,OACE,yBAAKE,UAAU,aACf,kBAAC,EAAD,CAAO9B,cAAeF,KAAKuB,MAAMK,WAAYzB,gBAAiBH,KAAKG,kBACnE,kBAAC,EAAD,CAAMmB,aAActB,KAAKsB,oB,GAxBblB,a,MCElB6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ffded825.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Table extends Component {\n  render() {\n    const { characterData, removeCharacter } = this.props\n    return (\n      <table>\n      <TableHeader />\n      <TableBody characterData={characterData} removeCharacter={removeCharacter}/>\n      </table>\n    )\n  }\n}\n\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n        <th>Delete</th>\n      </tr>\n    </thead>\n  )\n}\n\nconst TableBody = props => {\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n    <button onClick={() => props.removeCharacter(index)}>Delete</button>\n  </td>\n      </tr>\n    )\n  })\n\n  return <tbody>{rows}</tbody>\n}\n\nexport default Table","import React, { Component } from 'react'\n\nclass Form extends Component {\n  constructor(props) {  //We need the constructor() to use this, and to receive the props of the parent.\n    super(props)\n\n    // We're going to set the initial state of the Form to be an object with some empty properties, and assign that initial state to this.state\n    this.initialState = {\n      name: '',\n      job: '',\n    }\n\n    this.state = this.initialState\n  }\n\n\n  handleChange = event => {\n  const { name, value } = event.target\n\n  this.setState({\n    [name]: value,\n  })\n}\n\nsubmitForm = () => {\n  this.props.handleSubmit(this.state)\n  this.setState(this.initialState)\n}\n\nrender() {\n  const { name, job } = this.state;\n\n  return (\n    <form>\n      <label>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={this.handleChange} />\n      <label>Job</label>\n      <input\n        type=\"text\"\n        name=\"job\"\n        value={job}\n        onChange={this.handleChange} />\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n\n    </form>\n  );\n}\n}\n\nexport default Form;\n\n","import React, { Component } from 'react';\nimport Table from './Table'\nimport Form from './Form'\n\nclass App extends Component {\n    state = {\n        characters : [\n\n        ]\n    }\n\n    removeCharacter = index => {\n  const { characters } = this.state\n  this.setState({\n    characters: characters.filter((character, i) => { //testing an index vs. all the indices in the array, and returning all but the one that is passed through\n      return i !== index\n    }),\n  })\n}\n\nhandleSubmit = character => {\n  this.setState({ characters: [...this.state.characters, character] })\n} \n\n  render() {\n    return (\n      <div className=\"container\">\n      <Table characterData={this.state.characters} removeCharacter={this.removeCharacter}  />\n      <Form handleSubmit={this.handleSubmit} />\n      </div>\n    )\n  }\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n// import App from './Api'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}